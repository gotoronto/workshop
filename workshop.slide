Get started with Go

Go Toronto

* Getting Setup (Ask for help if you are stuck)

Install Git:

- For Windows Download and install from: git-scm.com/download/win
- For Ubuntu run `sudo apt-get install git-all`
- For OSX run `brew install git`

Install Go

- Download Go from: golang.org/doc/install
- Follow environment setup instructions
- Get the code: `go get github.com/gotoronto/workshop`
- change directory to `$GOPATH/src/github.com/gotoronto/workshop`

* Variables

Declaration and Initialization

  var myVar string // Defining a variable
  myVar = "Hello" // initializing a variable

Within a go function you can use a shortcut to define and initialize a variable
and go will infer its type. These are the same:

  myVar := "Hello"
  var myVar string = "Hello"

We can define all types of variables this way.

  myString := "Hello"
  myInteger := 123
  myFloat := 123.456
  mySlice := []int{1, 2, 3}

// TODO data types?

* Functions

There are a couple different forms of functions

  func myFunc1() { /*no params, no returns*/ }
  func myFunc2(a int, b string) { /*with params, no returns*/ }
  func myFunc3(a string) bool { //with params, and a single return
    return a == "yes"
  }
  func myFunc4(a string) (bool, error) { //with params, and multiple return
    return a == "test", fmt.Errorf("This is an error")
  }
  func myFunc5(a string) (isYes bool, err error) { //with params, and multiple named return
    isYes = a == "test"
    err = fmt.Errorf("This is an error")
    return
  }

They can simply be called like this
// TODO Put output

  myFunc1()
  myFunc2(2, "my string")
  isYes := myFunc3("no")
  isYes, err := myFunc3("no")

* Special Function

The main entry point into your program is the main function in the main package.

  package main

  func main() {
    // Do your stuff...
  }

* Packages

- Every folder of your project is a package.
- Every go source file requires a `package` declaration at the top.
- packages should align with their folders so a file inside a folder called events would have `package events` at the top
- This would mean it could be imported as `events`
- A common package is 'fmt' used for outputting messages like this:

  package main

  import "fmt"

  func main() {
    fmt.Println("Hi")
  }

* Task 1

- Create a file in this project directory called `main.go`
- Declare the main package
- Create a function that takes a string name argument and returns a formatted string that says hello to that name. e.g "Hello Jessica"
- Assign the output of your function to a variable
- Print out the variable.
- run your program by using the command `go run main.go`

* Control Flow

Control flow in go is very much like Javascript but without the () brackets!
A simple if/else if/else looks like this:

  if answer == 42 {
    return "You have found meaning"
  } else if answer == 41 {
    return "You are almost there"
  } else {
    return "Keep looking"
  }

Checking errors in Go is common and you can shorten your work with this:

  if err := foo(); err != nil {
    panic(err)
  }

Comparison is similar to Javascript as well using the same operators *!=*, *==*, *&&*, *||*, *>=*, *<=*, *<*, *>*

* Loops

Once again go is much like Javascript but without the brackets. A for loop might
look like this

  for i := 0; i < 10; i++ {}

Go does not have a while loop, you can use a `for` loop for that!

  for i < 10 {
    i++
  }

And you can iterate over slices easily as well!

  numbers := []string{"one", "two", "three"}
  for index, text := range numbers {...}

* Task 2

Write a program that prints all the numbers between 1 and 100, that are evenly
divisible by 3 (3, 6, 9)

* Slices (Arrays)

Unlike arrays, slices are typed only by the elements they contain (not the number of elements). To create an empty slice with non-zero length, use the builtin make. Here we make a slice of strings of length 3 (initially zero-valued).

  var s []string
  s = make([]string, 3)

We can set and get just like with arrays.

  s[0] = "a"
  s[1] = "b"

len returns the length of the slice as expected.

  len(s) // returns 3

* Slices Cont.

We can add to a slice by using Go's built in function `append`

  s = append(s, "d", "e")
  len(s) // return 4

*Gotchya* Watch out! This append allocates a new slice because it appended beyond
it's original size.

You can access Ranges of slices with the `:`

  s := []string{"a", "b", "c", "d", "e", "f"}
  s[2:5] // [c d e]
  // from start to 5
  s[:5] // [a b c d e]
  // from 2 to end
  s[2:] // [c d e f]

For good tips check out [[https://github.com/golang/go/wiki/SliceTricks]]

* Task 3

- Change into the  `slices` directory
- Implement the `Pic` function.
- It should return a slice of length dy, each element of which is a slice of dx integers. (You need to use a loop to allocate each []int inside the [][]int.)
- When you run the program, it will display your picture, interpreting the integers as colors.

.image assets/examples.png

* Structs

Go is not object oriented however you can arrange data into things you might call
"Objects". (Please don't tell people I said you could)

You can create a struct using a type declaration

  type Person struct {
    Name string
    Age  int
  }

Then you can initialize that struct

  p := Person{
    Name: "Greg",
    Age:  25,
  }

And access it's attributes

  fmt.Println(p.Name) // prints Greg

* Methods

Methods are just functions that are called on structs.

  type Person struct {
    Name string
  }

  // A pointer receiver means you can change this person.
  func (p *Person) SetName(newName string) {
    p.Name = newName
  }

  // No pointer means you cannot change this person.
  func (p Person) SayName() {
    fmt.Println(p.Name)
  }

  func main() {
    person := &Person{Name: "Jane"}
    person.SayName()
  }

* Public Vs Private

- Privacy is based on package level.
- Public properties are first letter *uppercase* and private properties are first letter *lowercase*

  package my_package // Anyone who imports my_package will only have public access

  var PublicConstVar = "Hello"
  var privateConstVar = "World"

  type Person struct { // public
    Name string // Public
    job  string // private
  }

  func PublicMethod() {}
  func privateMethod() {}

* JSON

// TODO describe and show JSON

Json is super simple in Go. You can add tags to your structs to tell go how to
unmarshal json into your structs.

  type Car struct{
    Make  string    `json:"make"`
    Model int       `json:"model"`
    Color []float32 `json:"color"`
    id    int
  }

Then you can unmarshal this data into the car struct like this

  car := Car{}
  err = json.Unmarshal(jsonData, &car)

**Gotchya** You can only unmarshal public attributes. If for some reason your
data is not making it into your struct, make sure the attributes are public.

* Task 4

- change into the json directory.
- In main.go create a struct to unmarshal the data from `people.json`
- Add up the ages of the people.
- Output the total.

* JSON REST Task 5 Pt. 1

// TODO get on the web

Let's get on the Web! The web directory has a skeleton of a CRUD API setup. Let's
see if we can implement the actions!

- Change into the `web` directory.
- run main.go and open your browser to [[http://127.0.0.1:8080]]
- You can't add new tasks. Look at the create action. It is half finished.
- Add a new ID to the new task. *Don't get fancy*
- Add the todo to the *todos* slice
- Restart the server and try to add a new task!

* JSON REST Task 5 Pt. 2

You have implemented create. Why don't we get update working!

- Check the *show* action on how to get the requested Todo
- Use your code from create to get the posted data
- Validate your data!
- Update the task
- Render the updated Todo

* Go Routines & Channels

Were are the Go Routines? you may ask.

It is true that they are one of the most powerful features of Go but in basic
web development you will rarely need them. To learn more about them visit  [[https://tour.golang.org/concurrency]]

* Follow up topics

- For a more indepth tour of everything please checkout out https://tour.golang.org
- Database integration [[https://dinosaurscode.xyz/go/2016/06/19/golang-mysql-authentication]]
- Setup your editor to auto-fmt your code [[https://atom.io/packages/go-plus]]
- Dependancy Management [[https://github.com/golang/dep]], [[https://github.com/Masterminds/glide]]
- Deployment [[https://semaphoreci.com/community/tutorials/how-to-deploy-a-go-web-application-with-docker]]
- Auth [[github.com/pressly/chi]] has some good jwt auth examples
- Reloading Go code when files are changed [[github.com/codegangsta/gin]]
